{"version":3,"sources":["home/timeline.js","home/home.js","app/socialIcons.js","app/app.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","timeLine","work","backgroundColor","width","margin","color","padding","borderTop","SimpleBottomNavigation","classes","className","Container","Paper","elevation","Home","this","props","home","Grid","container","profileContainer","item","xs","profile","timeline","React","Component","withStyles","theme","justifyContent","alignItems","textAlign","downloadButton","marginTop","border","position","top","transform","display","IconButton","aria-label","socialIcon","href","App","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAIMA,EAAYC,YAAW,CAC3BC,KAAM,GACNC,SAAU,GACVC,KAAM,CACJC,gBAAiB,UACjBC,MAAO,MACPC,OAAQ,YACRC,MAAO,UACPC,QAAS,OACTC,UAAW,uBAGA,SAASC,IACtB,IAAMC,EAAUZ,IAEhB,OACE,yBAAKa,UAAWD,EAAQV,MACtB,+CACA,kBAACY,EAAA,EAAD,CAAWD,UAAWD,EAAQT,UAC5B,kBAACY,EAAA,EAAD,CAAOF,UAAWD,EAAQR,KAAMY,UAAW,GACzC,kDACA,mEACA,8EAEF,kBAACD,EAAA,EAAD,CAAOF,UAAWD,EAAQR,KAAMY,UAAW,GACzC,kDACA,kDACA,mEAEF,kBAACD,EAAA,EAAD,CAAOF,UAAWD,EAAQR,KAAMY,UAAW,GACzC,0CACA,8CACA,+DC7BV,IA6BMC,E,iLACM,IACAL,EAAYM,KAAKC,MAAjBP,QACR,OACE,yBAAKC,UAAWD,EAAQQ,MACtB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACT,UAAWD,EAAQW,kBACjC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIZ,UAAWD,EAAQc,SACpC,qCACA,4DACA,2IAQF,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIZ,UAAWD,EAAQe,UACpC,kBAAC,EAAD,a,GAlBOC,IAAMC,WA0BVC,eAvDG,SAAAC,GAAK,MAAK,CAC1BX,KAAM,CACJY,eAAgB,SAChBC,WAAY,SACZC,UAAW,SACX7B,gBAAiB,WAEnB8B,eAAgB,CACdC,UAAW,QACX5B,MAAO,UACP6B,OAAQ,oBACRhC,gBAAiB,UACjB,UAAW,CACTA,gBAAiB,UACjBgC,OAAQ,sBAGZV,SAAU,CAERnB,MAAO,WAGTkB,QAAS,CACPjB,QAAS,OACTD,MAAO,UACPH,gBAAiB,cA8BNyB,CAAsBb,G,2DCvD/BjB,EAAYC,YAAW,CAC3BC,KAAM,CACJoC,SAAU,QACVC,IAAK,MACLC,UAAW,mBACXnC,gBAAiB,UACjBoC,QAAS,iBAIE,SAAS9B,IACtB,IAAMC,EAAUZ,IAEhB,OACE,yBAAKa,UAAWD,EAAQV,MACtB,kBAACwC,EAAA,EAAD,CACEC,aAAW,UACX9B,UAAWD,EAAQgC,WACnBC,KAAK,qCAEL,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CACEC,aAAW,UACX9B,UAAWD,EAAQgC,WACnBC,KAAK,qDAEL,kBAAC,IAAD,OAEF,kBAACH,EAAA,EAAD,CACEC,aAAW,UACX9B,UAAWD,EAAQgC,WACnBC,KAAK,oCAEL,kBAAC,IAAD,Q,ICpCaC,E,iLAEjB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANyBnB,aCOboB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d7278f4.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Container } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {},\n  timeLine: {},\n  work: {\n    backgroundColor: \"#35363b\",\n    width: \"40%\",\n    margin: \"30px auto\",\n    color: \"#d4d4d4\",\n    padding: \"20px\",\n    borderTop: \"2px solid #ffed03\"\n  }\n});\nexport default function SimpleBottomNavigation() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <h1>Work Experience</h1>\n      <Container className={classes.timeLine}>\n        <Paper className={classes.work} elevation={3}>\n          <h2>cerner corporation</h2>\n          <div>Associate senior software engineer</div>\n          <div>Working with contract and reimbursement team</div>\n        </Paper>\n        <Paper className={classes.work} elevation={3}>\n          <h2>cerner corporation</h2>\n          <div>software engineer</div>\n          <div>Working with iAware Platfrom team</div>\n        </Paper>\n        <Paper className={classes.work} elevation={3}>\n          <h2>Thoughtlab</h2>\n          <div>web developer</div>\n          <div>Worked on multiple websites</div>\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\n//import Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n//import Button from \"@material-ui/core/Button\";\nimport Timeline from \"./timeline.js\";\n\nconst useStyles = theme => ({\n  home: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    backgroundColor: \"#27292e\"\n  },\n  downloadButton: {\n    marginTop: \"100px\",\n    color: \"#d4d4d4\",\n    border: \"1px solid #ffed03\",\n    backgroundColor: \"#35363b\",\n    \"&:hover\": {\n      backgroundColor: \"#35363b\",\n      border: \"2px solid #ffed03\"\n    }\n  },\n  timeline: {\n    // backgroundColor: \"#35363b\",\n    color: \"#d4d4d4\"\n  },\n\n  profile: {\n    padding: \"50px\",\n    color: \"#d4d4d4\",\n    backgroundColor: \"#35363b\"\n  }\n});\n\nclass Home extends React.Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.home}>\n        <Grid container className={classes.profileContainer}>\n          <Grid item xs={12} className={classes.profile}>\n            <h1>Hello</h1>\n            <h3>This is Manideep Gattamaneni</h3>\n            <div>\n              I am currently working at cerner corporation as software engineer\n              trying new things and solving problems.\n            </div>\n            {/* <Button className={classes.downloadButton} variant=\"contained\">\n              View Resume\n            </Button> */}\n          </Grid>\n          <Grid item xs={12} className={classes.timeline}>\n            <Timeline />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(Home);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"fixed\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    backgroundColor: \"#ffed03\",\n    display: \"inline-grid\"\n  }\n});\n\nexport default function SimpleBottomNavigation() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        aria-label=\"twitter\"\n        className={classes.socialIcon}\n        href=\"https://twitter.com/gmanideep1991\"\n      >\n        <TwitterIcon />\n      </IconButton>\n      <IconButton\n        aria-label=\"twitter\"\n        className={classes.socialIcon}\n        href=\"https://www.linkedin.com/in/manideep-gattamaneni/\"\n      >\n        <LinkedInIcon />\n      </IconButton>\n      <IconButton\n        aria-label=\"twitter\"\n        className={classes.socialIcon}\n        href=\"https://github.com/gmanideep1991\"\n      >\n        <GitHubIcon />\n      </IconButton>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Home from \"../home/home.js\";\nimport SocialIcons from \"./socialIcons.js\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <Home />\n        <SocialIcons />\n      </React.Fragment>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/app.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}